{"ast":null,"code":"var _jsxFileName = \"/Users/bugdonepavlov/Desktop/work/module-federation-test/with-module-federation/home/src/App.tsx\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { usersReducer } from 'rootRedux/features/users';\nvar remoteAppScope = 'remoteApp';\n\nvar RemoteApp = function RemoteApp() {\n  var dispatch = useDispatch();\n  var state = useSelector(function (state) {\n    return state[remoteAppScope];\n  });\n\n  var _useState = useState(''),\n      remoteAppInput = _useState[0],\n      setRemoteAppInput = _useState[1];\n\n  return __jsx(\"div\", {\n    style: {\n      marginTop: '10px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, \"RemoteApp\"), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, \"RemoteApp's name from the redux store : \", state && state.appName));\n};\n\nvar RemoteAppWrapper = function RemoteAppWrapper(props) {\n  var store = props.store;\n  console.log('remote props', props);\n  useEffect(function () {\n    store.injectReducer(remoteAppScope, usersReducer);\n  }, []);\n  return __jsx(Provider, {\n    store: store || {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(RemoteApp, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default RemoteAppWrapper;","map":{"version":3,"sources":["/Users/bugdonepavlov/Desktop/work/module-federation-test/with-module-federation/home/src/App.tsx"],"names":["React","useState","useEffect","Provider","useSelector","useDispatch","usersReducer","remoteAppScope","RemoteApp","dispatch","state","remoteAppInput","setRemoteAppInput","marginTop","appName","RemoteAppWrapper","props","store","console","log","injectReducer"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAmD,aAAnD;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,IAAMC,cAAc,GAAG,WAAvB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,MAAMK,KAAK,GAAGN,WAAW,CAAC,UAACM,KAAD;AAAA,WAAgBA,KAAK,CAACH,cAAD,CAArB;AAAA,GAAD,CAAzB;;AACA,kBAA4CN,QAAQ,CAAC,EAAD,CAApD;AAAA,MAAOU,cAAP;AAAA,MAAuBC,iBAAvB;;AAEA,SACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAA8CH,KAAK,IAAIA,KAAK,CAACI,OAA7D,CAFF,CADF;AAiBD,CAtBD;;AAwBA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAgB;AACvC,MAAQC,KAAR,GAAkBD,KAAlB,CAAQC,KAAR;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,KAA5B;AACAd,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,KAAK,CAACG,aAAN,CAAoBb,cAApB,EAAoCD,YAApC;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEW,KAAK,IAAI,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAZD;;AAcA,eAAeF,gBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { usersReducer } from 'rootRedux/features/users';\n\nconst remoteAppScope = 'remoteApp';\n\nconst RemoteApp = () => {\n  const dispatch = useDispatch();\n  const state = useSelector((state: any) => state[remoteAppScope]);\n  const [remoteAppInput, setRemoteAppInput] = useState('');\n\n  return (\n    <div style={{ marginTop: '10px' }}>\n      <div>RemoteApp</div>\n      <div>RemoteApp's name from the redux store : {state && state.appName}</div>\n\n      {/* <div>\n        <input\n          style={{ marginRight: '10px' }}\n          type=\"text\"\n          onChange={(e) => {\n            setRemoteAppInput(e.target.value);\n          }}\n        />\n        <button onClick={() => dispatch(changeAppNameAction(remoteAppInput))}>Dispatch RemoteApp new name</button>\n      </div> */}\n    </div>\n  );\n};\n\nconst RemoteAppWrapper = (props: any) => {\n  const { store } = props;\n  console.log('remote props', props);\n  useEffect(() => {\n    store.injectReducer(remoteAppScope, usersReducer);\n  }, []);\n\n  return (\n    <Provider store={store || {}}>\n      <RemoteApp />\n    </Provider>\n  );\n};\n\nexport default RemoteAppWrapper;\n"]},"metadata":{},"sourceType":"module"}