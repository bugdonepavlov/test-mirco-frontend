{"ast":null,"code":"import _objectSpread from \"/Users/bugdonepavlov/Desktop/work/module-federation-test/with-module-federation/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport { createLogger } from 'redux-logger';\nimport staticReducers from './rootReducer';\nvar logMiddleware = createLogger({\n  predicate: function predicate() {\n    return true;\n  }\n});\nexport var makeStore = function makeStore() {\n  var store = configureStore({\n    middleware: function middleware(getDefaultMiddleware) {\n      return getDefaultMiddleware().concat(logMiddleware);\n    },\n    devTools: true,\n    reducer: combineReducers(_objectSpread({}, staticReducers))\n  }); // @ts-ignore\n\n  store.asyncReducers = {}; // @ts-ignore\n\n  store.injectReducer = function (key, asyncReducer) {\n    // @ts-ignore\n    store.asyncReducers[key] = asyncReducer; // @ts-ignore\n\n    store.replaceReducer(combineReducers(_objectSpread(_objectSpread({}, staticReducers), store.asyncReducers)));\n  };\n\n  return store;\n};\nexport var store = makeStore(); // @ts-ignore\n\nwindow.__store = store;","map":{"version":3,"sources":["/Users/bugdonepavlov/Desktop/work/module-federation-test/with-module-federation/home/src/rootRedux/store.ts"],"names":["configureStore","combineReducers","createLogger","staticReducers","logMiddleware","predicate","makeStore","store","middleware","getDefaultMiddleware","concat","devTools","reducer","asyncReducers","injectReducer","key","asyncReducer","replaceReducer","window","__store"],"mappings":";AAAA,SAASA,cAAT,EAA8CC,eAA9C,QAAqE,kBAArE;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,cAAP,MAA2B,eAA3B;AAEA,IAAMC,aAAa,GAAGF,YAAY,CAAC;AACjCG,EAAAA,SAAS,EAAE;AAAA;AAAA;AADsB,CAAD,CAAlC;AAIA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B,MAAMC,KAAK,GAAGP,cAAc,CAAC;AAC3BQ,IAAAA,UAAU,EAAE,oBAACC,oBAAD;AAAA,aAA0BA,oBAAoB,GAAGC,MAAvB,CAA8BN,aAA9B,CAA1B;AAAA,KADe;AAE3BO,IAAAA,QAAQ,MAFmB;AAG3BC,IAAAA,OAAO,EAAEX,eAAe,mBACnBE,cADmB;AAHG,GAAD,CAA5B,CAD6B,CAS7B;;AACAI,EAAAA,KAAK,CAACM,aAAN,GAAsB,EAAtB,CAV6B,CAY7B;;AACAN,EAAAA,KAAK,CAACO,aAAN,GAAsB,UAACC,GAAD,EAAcC,YAAd,EAAoC;AACxD;AACAT,IAAAA,KAAK,CAACM,aAAN,CAAoBE,GAApB,IAA2BC,YAA3B,CAFwD,CAGxD;;AACAT,IAAAA,KAAK,CAACU,cAAN,CACEhB,eAAe,iCACVE,cADU,GAGVI,KAAK,CAACM,aAHI,EADjB;AAOD,GAXD;;AAYA,SAAON,KAAP;AACD,CA1BM;AA4BP,OAAO,IAAMA,KAAK,GAAGD,SAAS,EAAvB,C,CAEP;;AACAY,MAAM,CAACC,OAAP,GAAiBZ,KAAjB","sourcesContent":["import { configureStore, ThunkAction, Action, combineReducers } from '@reduxjs/toolkit';\nimport { createLogger } from 'redux-logger';\nimport staticReducers from './rootReducer';\n\nconst logMiddleware = createLogger({\n  predicate: () => process.env.NODE_ENV !== 'production',\n});\n\nexport const makeStore = () => {\n  const store = configureStore({\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logMiddleware),\n    devTools: process.env.NODE_ENV !== 'production',\n    reducer: combineReducers({\n      ...staticReducers,\n    }),\n  });\n\n  // @ts-ignore\n  store.asyncReducers = {};\n\n  // @ts-ignore\n  store.injectReducer = (key: string, asyncReducer: any) => {\n    // @ts-ignore\n    store.asyncReducers[key] = asyncReducer;\n    // @ts-ignore\n    store.replaceReducer(\n      combineReducers({\n        ...staticReducers,\n        // @ts-ignore\n        ...store.asyncReducers,\n      }),\n    );\n  };\n  return store;\n};\n\nexport const store = makeStore();\n\n// @ts-ignore\nwindow.__store = store;\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n"]},"metadata":{},"sourceType":"module"}